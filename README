This program was completed for credit in CMPS-12B in Winter Quarter 
of 2012 in Wesley Mackey's class. It was programmed with my partner,
Graham Greving. 

Below are the specs for assignment as provided by the professor.

1.  Overview

In this assignment you will implement a spelling checker that uses a
hash table to look up words in a dictionary.  Collision resolution
will be done by linear probing rather than chaining.  A scanner
generated by flex will be used to extract words form the files to be
checked.

2.  Program specification

We present the program in the form of a Unix man(1) page.

NAME
     spellchk -- spell check some files based on dictionary words

SYNOPSIS
     spellchk [-nxy] [-d dictionary] [-@ debugflags] [filename...]

DESCRIPTION
     This program examines files for correct spell checking.  Some
     number of dictionaries are read in, including the default
     dictionary, plus any other auxiliary dictionaries.  then each
     file is read, and a report of any incorrectly spelled words is
     made.

OPTIONS
     Options are scanned using getopt(3c), and are subject to its
     restrictions and conventions.  It is an error if no dictionaries
     are specified.

     -d dictionary
          The specified dictionary is loaded and used in addition to
          the default dictionary.  This is optional unless -n is used.

     -n   The default special dictionary is excluded and only
          explicitly specified dictionaries are used.

     -x   Debug statistics about the hash table are dumped.  If the -x
          option is given more than once, the entire hash table is
          dumped.  The files to be spell checked are ignored if this
          option is specified.

     -y   Turns on the scanner's debug flag.

     -@ debugflags
          Turns on debugging flags for the DEBUGF macro.  The option
          -@@ turns on all debug flags.

OPERANDS
     Each operand is the name of file whose words are to be checked
     for spelling errors.  A word is any sequence of letters and
     digits, possibly with the characters ampersand (&), apostrophe
     ('), hyphen (-), or period (.) embedded with the word.  If a
     filename is specified as a minus sign (-), it causes stdin it be
     read at that point.  If no filenames are specified, stdin is
     spell checked.

EXIT STATUS

     0    No errors nor misspelled words were detected.

     1    One or more misspelled words were detected, but there were
          no errors.

     2    One or more errors were detected and error messages were
          printed.

FILES

     /afs/cats.ucsc.edu/courses/cmps012b-wm/usr/dict/words
          Contains the default dictionary.

BUGS
     Standard spell-checking algorithms for variations on words as to
     number and tense are not performed.  In any case, poems like the
     one in Figure 1 are likely to confuse most spelling checkers.

                Eye halve a spelling chequer
                It came with my pea sea
                It plainly marques four my revue
                Miss steaks eye kin knot sea

                Eye strike a quay and type a word
                And weight four it two say
                Weather eye am wrong oar rite
                It shows me strait a weigh
                As soon as a mist ache is maid
                It nose bee fore two long
                And eye can put the error rite
                Its rare lea ever wrong

                Eye have run this poem threw it
                Eye am shore your pleased two no
                Its letter perfect all the weigh
                My chequer tolled me sew.

                  Figure 1.  Test file for spellchk

+-----------------------+------------------------------------------------+
|FILE *yyin;            | Is the file from which yylex reads its input.  |
|                       | It must be opened before calling yylex to read |
|                       | any file.  If it is not stdin, then it should  |
|                       | be closed when yylex is done with the file.    |
+-----------------------+------------------------------------------------+
|char *yytext;          | Whenever yylex returns from scanning, this     |
|                       | variable points into its buffer at the word    |
|                       | just recognized.                               |
+-----------------------+------------------------------------------------+
|int yy_flex_debug;     | This is a debug flag which puts yylex into     |
|                       | verbose mode.  You probably don't need it.     |
+-----------------------+------------------------------------------------+
|int yylex (void);      | Scans the file yyin and for each word found,   |
|                       | returns a non-zero integer code, leaving       |
|                       | yytext to point at the word.  It returns 0 at  |
|                       | end of file.                                   |
+-----------------------+------------------------------------------------+
|int yylineno;          | is used by yylex to keep track of the current  |
|                       | line number, which is useful to you in error   |
|                       | reporting.  It needs to be reset to 1 before   |
|                       | beginning a scan.                              |
+-----------------------+------------------------------------------------+
|void yycleanup (void); | Cleans up the buffers allocated by yylex and   |
|                       | releases their storage.  This is called only   |
|                       | when yylex is no longer needed.                |
+-----------------------+------------------------------------------------+
             Figure 2.  Interface to the function yylex()

3.  Survey of the code

Study the existing code, which is a partial implementation of your
program.  There are several modules and other files, most with a
separate .h and .c file.

(\alpha) The default dictionary really ought to be /usr/share/dict/
     words, and would actually be in a real implementation, however it
     is very large on Linux, so a smaller dictionary was copied from a
     Solaris machine.  Using the smaller dictionary will allow you to
     test your program without needing to use a very large amount of
     memory, expecially when debugging.  See the output of wc(1):
          25143   25143  206663 cmps012b-wm/usr/dict/words
         479623  479623 4950996 /usr/share/dict/words

(\beta) Makefile contains the usual building information.  Makefile.
     deps is a generated file which lists the dependencies.  It must
     be regenerated any time there is a change to any #include
     statement in your program.

(\gamma) The program pspell.perl is a reference implementation, but
     does  not contain debug switches.

(\delta) Test your program.  Use valgrind to find problems with
     uninitialized pointers and other bad memory references.  Ignore
     any complaints it makes about memory leak.  Fix any problems with
     segmentation faults or bus errors or other problems reported by
     valgrind and gdb.

